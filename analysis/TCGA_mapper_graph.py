# -*- coding: utf-8 -*-
"""
Created on Thu May  5 16:39:42 2022

@author: ciara
"""



import numpy as np
import pandas as pd
from hdbscan import HDBSCAN
import hotmapper as hm
from itertools import chain
from sklearn.metrics import pairwise_distances



#------------------------------read in files----------------------------------# 
#tcga gene expression after DSGA transformation 
X = "tcga/tcga_dct.csv" 

#mapper graph will be coloured by survival time censored to 10 years
os = "tcga/10_year_os.csv" #10-year overall survival event & time censored to 10 years. 

#define the attribute function as patients who have relapsed before 10 years
outcome = np.array((os['Time']<=120) & (os['Event'] == "1:Death")).astype(int)


#lens function is built on the weights assigned to the subset list of features
#generated by the hotspot search on the discovery dataset
weights = "metabric/weights.txt"
feature_list = "metabric/feature_list.txt"

#----------------------build mapper graph--------------------------------#
#construct the lens function
linear_lens = hm.random_lens.Lens(np.array(X), nonzero_features = len(weights), weights = weights, feature_list = feature_list)

# build the mapper graph according to the identified parameters
mapper = hm.mapper.MapperGraph(data = np.array(X), 
                                lens_function = linear_lens["lens"], 
                                intervals = 30, 
                                overlap = 0.3,
                                clustering_algorithm = HDBSCAN())
mapper.build_graph() 

# visualise the graph, colouring by relapse outcome
hm.visualisation.draw_graph(mapper_graph = mapper.graph, 
          attribute_function = outcome, 
          samples_in_nodes = mapper.samples_in_nodes,
          size = 10, 
          style =3, 
          col_legend_title = "Event before\n 10 years",
          labels = True,
          tick_labels = False)

#----------------------confirm presence of hotspots--------------------------------#
hotspot_search = hm.hotspot.HotspotSearch(mapper_graph = mapper.graph,
                                          attribute_function = outcome, 
                                          samples_in_nodes = mapper.samples_in_nodes)

#check the distribution of hotspot nodes 
hotspot_nodes = hotspot_search.search_graph(attribute_threshold = 0.1, 
                                            min_sample_size = 30, 
                                            attribute_extreme = "higher", 
                                            plot_dendrogram = True )
n = list(chain.from_iterable(hotspot_nodes))

#visualise again but highlight the nodes in the graph identified as hotspots
hm.visualisation.draw_graph(mapper_graph = mapper.graph, 
          attribute_function = outcome, 
          samples_in_nodes = mapper.samples_in_nodes,
          size = 10, 
          style = 3, 
          hotspot_nodes = n,
          labels = False,
          tick_labels = False,
          col_legend_title = "Event before\n 10 years")

print(f"hotspots... {n}")


#----------------------confirm presence of hotspots--------------------------------#
#confirm the presence of a hotspot in node 1
graph_components = hmh.Subgraphs(mapper)
hotspots = graph_components.run_hotspot_search(attribute_threshold = 6, min_sample_size = 30)
print(hotspots)


#hotspot is in node 1, which is the first hotspot group of the first component
#obtain all the samples    
nlab = hotspots[0]["hotspot nodes"][0]
hnodes = [mapper.samples_in_node[i] for i in nlab]
hnodes_flat = np.unique(list(hmu.flatten(hnodes)))

#create new dataframe with hotspot group labels for tcga 
h_tcga = pd.DataFrame(index=surv.index, columns = ["Hotspot"])
h_tcga["Hotspot"] = 0
hotspot_patients = h_tcga.iloc[hnodes_flat].index
h_tcga.loc[hotspot_patients,"Hotspot"] = 1

#save tcga hotspot group labels
h_tcga.to_csv("tcga/hotspot_labels.csv")




#-------------------investigate hotspot distance to metabric centroid----------------#
#we can also visualise graph by the distance to metabric centroid 
graph = mapper.build_graph(attribute = d)
#visualise graph by survival 
mapper.visualise(size = 10, style = 2, labels = False, col_legend_title = "distance to centroid")

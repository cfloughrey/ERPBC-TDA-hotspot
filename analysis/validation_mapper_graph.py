# -*- coding: utf-8 -*-
"""
Created on Thu May  5 16:39:42 2022

@author: ciara
"""



import numpy as np
import pandas as pd
from hdbscan import HDBSCAN
import hotmapper as hm
from itertools import chain
from sklearn.metrics import pairwise_distances



#------------------------------read in files----------------------------------# 
#tcga gene expression after DSGA transformation 
X_tcga = "tcga/tcga_dct.csv" 

#mapper graph will be coloured by survival time censored to 10 years
os = "tcga/10_year_os.csv" #10-year overall survival event & time censored to 10 years. 

#define the attribute function as patients who have relapsed before 10 years
outcome = np.array((os['Time']<=120) & (os['Event'] == "1:Death")).astype(int)

#lens function is built on the weights assigned to the subset list of features
#generated by the hotspot search on the discovery dataset
weights = "metabric/weights.txt"
feature_list = "metabric/feature_list.txt"

#we will also look at the distance of the tcga hotspot to the metabric hotspot 
X_meta = "metabric/metabric_dct.csv" 
y_meta = "metabric/hotspot_labels.csv" 

#----------------------build mapper graph--------------------------------#
#construct the lens function
linear_lens = hm.random_lens.Lens(np.array(X_tcga), nonzero_features = len(weights), weights = weights, feature_list = feature_list)

# build the mapper graph according to the identified parameters
mapper = hm.mapper.MapperGraph(data = np.array(X_tcga), 
                                lens_function = linear_lens["lens"], 
                                intervals = 30, 
                                overlap = 0.3,
                                clustering_algorithm = HDBSCAN())
mapper.build_graph() 

# visualise the graph, colouring by overall survival outcome
hm.visualisation.draw_graph(mapper_graph = mapper.graph, 
          attribute_function = outcome, 
          samples_in_nodes = mapper.samples_in_nodes,
          size = 10, 
          style =3, 
          col_legend_title = "Event before\n 10 years",
          labels = True,
          tick_labels = False)


#----------------------confirm presence of hotspots--------------------------------#
hotspot_search = hm.hotspot.HotspotSearch(mapper_graph = mapper.graph,
                                          attribute_function = outcome, 
                                          samples_in_nodes = mapper.samples_in_nodes)

#check the distribution of hotspot nodes 
hotspot_nodes = hotspot_search.search_graph(attribute_threshold = 0.1, 
                                            min_sample_size = 30, 
                                            attribute_extreme = "higher", 
                                            plot_dendrogram = True )
n = list(chain.from_iterable(hotspot_nodes))

#visualise again but highlight the nodes in the graph identified as hotspots
hm.visualisation.draw_graph(mapper_graph = mapper.graph, 
          attribute_function = outcome, 
          samples_in_nodes = mapper.samples_in_nodes,
          size = 10, 
          style = 3, 
          hotspot_nodes = n,
          labels = False,
          tick_labels = False,
          col_legend_title = "Event before\n 10 years")

print(f"hotspots... {n}")

#save hotspot class 
node_id = mapper.samples_in_nodes
node_id.index = X_tcga.index
y_tcga = pd.DataFrame(node_id[n].max(axis=1), columns = ["Hotspot"])



#-------------------investigate hotspot distance to discovery hotspot centroid----------------#
#we can also visualise graph by the distance to metabric centroid 
#only consider genes involved in lens function
X_tcga_lens = X_tcga[X_tcga.columns[feature_list]]
X_meta_lens = X_meta[X_meta.columns[feature_list]]

#find the centroid of the METABRIC hotspot samples 
X_meta_lens_H = X_df_meta.loc[hotspot_samples["Hotspot"]==1]
X_meta_H_centroid = np.mean(np.array(X_meta_lens_H),axis = 0)

#calculate canberra distance
dist = pairwise_distances(X_tcga_lens, [X_meta_H_centroid], metric = "canberra")
centroid_dist = [i[0] for i in dist]

#visualise graph with 'distance to metabric centroid by lens function genes' as attribute 
hm.visualisation.draw_graph(mapper_graph = mapper.graph, 
      attribute_function = centroid_dist, 
      samples_in_nodes = mapper.samples_in_nodes,
      size = 10, 
      style = 2, 
      hotspot_nodes = n,
      col_legend_title = "Distance to\n Hotspot Centroid",
      labels = False,
      tick_labels = True)


#----------------------save files--------------------------------#
#save the hotspot class labels 
y_tcga.to_csv("tcga/hotspot_labels.csv")       
